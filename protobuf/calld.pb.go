// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: calld.proto

package rpcbench

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	protobuf "google/protobuf"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BalanceSummary struct {
	UUID     string  `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ID       string  `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Type     string  `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Value    float64 `protobuf:"fixed64,4,opt,name=Value,proto3" json:"Value,omitempty"`
	Disabled bool    `protobuf:"varint,5,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
}

func (m *BalanceSummary) Reset()         { *m = BalanceSummary{} }
func (m *BalanceSummary) String() string { return proto.CompactTextString(m) }
func (*BalanceSummary) ProtoMessage()    {}
func (*BalanceSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{0}
}
func (m *BalanceSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BalanceSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BalanceSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BalanceSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BalanceSummary.Merge(m, src)
}
func (m *BalanceSummary) XXX_Size() int {
	return m.Size()
}
func (m *BalanceSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_BalanceSummary.DiscardUnknown(m)
}

var xxx_messageInfo_BalanceSummary proto.InternalMessageInfo

func (m *BalanceSummary) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *BalanceSummary) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *BalanceSummary) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *BalanceSummary) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *BalanceSummary) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

type AccountSummary struct {
	Tenant           string            `protobuf:"bytes,1,opt,name=Tenant,proto3" json:"Tenant,omitempty"`
	ID               string            `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	BalanceSummaries []*BalanceSummary `protobuf:"bytes,3,rep,name=BalanceSummaries,proto3" json:"BalanceSummaries,omitempty"`
	AllowNegative    bool              `protobuf:"varint,4,opt,name=AllowNegative,proto3" json:"AllowNegative,omitempty"`
	Disabled         bool              `protobuf:"varint,5,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
}

func (m *AccountSummary) Reset()         { *m = AccountSummary{} }
func (m *AccountSummary) String() string { return proto.CompactTextString(m) }
func (*AccountSummary) ProtoMessage()    {}
func (*AccountSummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{1}
}
func (m *AccountSummary) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountSummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountSummary.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountSummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountSummary.Merge(m, src)
}
func (m *AccountSummary) XXX_Size() int {
	return m.Size()
}
func (m *AccountSummary) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountSummary.DiscardUnknown(m)
}

var xxx_messageInfo_AccountSummary proto.InternalMessageInfo

func (m *AccountSummary) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *AccountSummary) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AccountSummary) GetBalanceSummaries() []*BalanceSummary {
	if m != nil {
		return m.BalanceSummaries
	}
	return nil
}

func (m *AccountSummary) GetAllowNegative() bool {
	if m != nil {
		return m.AllowNegative
	}
	return false
}

func (m *AccountSummary) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

type Rate struct {
	GroupIntervalStart *protobuf.Duration `protobuf:"bytes,1,opt,name=GroupIntervalStart,proto3" json:"GroupIntervalStart,omitempty"`
	Value              float64            `protobuf:"fixed64,2,opt,name=Value,proto3" json:"Value,omitempty"`
	RateIncrement      *protobuf.Duration `protobuf:"bytes,3,opt,name=RateIncrement,proto3" json:"RateIncrement,omitempty"`
	RateUnit           *protobuf.Duration `protobuf:"bytes,4,opt,name=RateUnit,proto3" json:"RateUnit,omitempty"`
}

func (m *Rate) Reset()         { *m = Rate{} }
func (m *Rate) String() string { return proto.CompactTextString(m) }
func (*Rate) ProtoMessage()    {}
func (*Rate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{2}
}
func (m *Rate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Rate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rate.Merge(m, src)
}
func (m *Rate) XXX_Size() int {
	return m.Size()
}
func (m *Rate) XXX_DiscardUnknown() {
	xxx_messageInfo_Rate.DiscardUnknown(m)
}

var xxx_messageInfo_Rate proto.InternalMessageInfo

func (m *Rate) GetGroupIntervalStart() *protobuf.Duration {
	if m != nil {
		return m.GroupIntervalStart
	}
	return nil
}

func (m *Rate) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Rate) GetRateIncrement() *protobuf.Duration {
	if m != nil {
		return m.RateIncrement
	}
	return nil
}

func (m *Rate) GetRateUnit() *protobuf.Duration {
	if m != nil {
		return m.RateUnit
	}
	return nil
}

type RIRate struct {
	ConnectFee       float64 `protobuf:"fixed64,1,opt,name=ConnectFee,proto3" json:"ConnectFee,omitempty"`
	RoundingMethod   string  `protobuf:"bytes,2,opt,name=RoundingMethod,proto3" json:"RoundingMethod,omitempty"`
	RoundingDecimals int32   `protobuf:"varint,3,opt,name=RoundingDecimals,proto3" json:"RoundingDecimals,omitempty"`
	MaxCost          float64 `protobuf:"fixed64,4,opt,name=MaxCost,proto3" json:"MaxCost,omitempty"`
	MaxCostStrategy  string  `protobuf:"bytes,5,opt,name=MaxCostStrategy,proto3" json:"MaxCostStrategy,omitempty"`
	Rates            []*Rate `protobuf:"bytes,6,rep,name=Rates,proto3" json:"Rates,omitempty"`
	Tag              string  `protobuf:"bytes,7,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (m *RIRate) Reset()         { *m = RIRate{} }
func (m *RIRate) String() string { return proto.CompactTextString(m) }
func (*RIRate) ProtoMessage()    {}
func (*RIRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{3}
}
func (m *RIRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RIRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RIRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RIRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RIRate.Merge(m, src)
}
func (m *RIRate) XXX_Size() int {
	return m.Size()
}
func (m *RIRate) XXX_DiscardUnknown() {
	xxx_messageInfo_RIRate.DiscardUnknown(m)
}

var xxx_messageInfo_RIRate proto.InternalMessageInfo

func (m *RIRate) GetConnectFee() float64 {
	if m != nil {
		return m.ConnectFee
	}
	return 0
}

func (m *RIRate) GetRoundingMethod() string {
	if m != nil {
		return m.RoundingMethod
	}
	return ""
}

func (m *RIRate) GetRoundingDecimals() int32 {
	if m != nil {
		return m.RoundingDecimals
	}
	return 0
}

func (m *RIRate) GetMaxCost() float64 {
	if m != nil {
		return m.MaxCost
	}
	return 0
}

func (m *RIRate) GetMaxCostStrategy() string {
	if m != nil {
		return m.MaxCostStrategy
	}
	return ""
}

func (m *RIRate) GetRates() []*Rate {
	if m != nil {
		return m.Rates
	}
	return nil
}

func (m *RIRate) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type RITiming struct {
	Years      []int32 `protobuf:"varint,1,rep,packed,name=Years,proto3" json:"Years,omitempty"`
	Months     []int32 `protobuf:"varint,2,rep,packed,name=Months,proto3" json:"Months,omitempty"`
	MonthDays  []int32 `protobuf:"varint,3,rep,packed,name=MonthDays,proto3" json:"MonthDays,omitempty"`
	WeekDays   []int32 `protobuf:"varint,4,rep,packed,name=WeekDays,proto3" json:"WeekDays,omitempty"`
	StartTime  string  `protobuf:"bytes,5,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime    string  `protobuf:"bytes,6,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	CronString string  `protobuf:"bytes,7,opt,name=cronString,proto3" json:"cronString,omitempty"`
	Tag        string  `protobuf:"bytes,8,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (m *RITiming) Reset()         { *m = RITiming{} }
func (m *RITiming) String() string { return proto.CompactTextString(m) }
func (*RITiming) ProtoMessage()    {}
func (*RITiming) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{4}
}
func (m *RITiming) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RITiming) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RITiming.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RITiming) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RITiming.Merge(m, src)
}
func (m *RITiming) XXX_Size() int {
	return m.Size()
}
func (m *RITiming) XXX_DiscardUnknown() {
	xxx_messageInfo_RITiming.DiscardUnknown(m)
}

var xxx_messageInfo_RITiming proto.InternalMessageInfo

func (m *RITiming) GetYears() []int32 {
	if m != nil {
		return m.Years
	}
	return nil
}

func (m *RITiming) GetMonths() []int32 {
	if m != nil {
		return m.Months
	}
	return nil
}

func (m *RITiming) GetMonthDays() []int32 {
	if m != nil {
		return m.MonthDays
	}
	return nil
}

func (m *RITiming) GetWeekDays() []int32 {
	if m != nil {
		return m.WeekDays
	}
	return nil
}

func (m *RITiming) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *RITiming) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *RITiming) GetCronString() string {
	if m != nil {
		return m.CronString
	}
	return ""
}

func (m *RITiming) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type RateInterval struct {
	Timing *RITiming `protobuf:"bytes,1,opt,name=Timing,proto3" json:"Timing,omitempty"`
	Rating *RIRate   `protobuf:"bytes,2,opt,name=Rating,proto3" json:"Rating,omitempty"`
	Weight float64   `protobuf:"fixed64,3,opt,name=Weight,proto3" json:"Weight,omitempty"`
}

func (m *RateInterval) Reset()         { *m = RateInterval{} }
func (m *RateInterval) String() string { return proto.CompactTextString(m) }
func (*RateInterval) ProtoMessage()    {}
func (*RateInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{5}
}
func (m *RateInterval) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RateInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RateInterval.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RateInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RateInterval.Merge(m, src)
}
func (m *RateInterval) XXX_Size() int {
	return m.Size()
}
func (m *RateInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_RateInterval.DiscardUnknown(m)
}

var xxx_messageInfo_RateInterval proto.InternalMessageInfo

func (m *RateInterval) GetTiming() *RITiming {
	if m != nil {
		return m.Timing
	}
	return nil
}

func (m *RateInterval) GetRating() *RIRate {
	if m != nil {
		return m.Rating
	}
	return nil
}

func (m *RateInterval) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type RatingInfo struct {
	MatchedSubject string              `protobuf:"bytes,1,opt,name=MatchedSubject,proto3" json:"MatchedSubject,omitempty"`
	RatingPlanId   string              `protobuf:"bytes,2,opt,name=RatingPlanId,proto3" json:"RatingPlanId,omitempty"`
	MatchedPrefix  string              `protobuf:"bytes,3,opt,name=MatchedPrefix,proto3" json:"MatchedPrefix,omitempty"`
	MatchedDestId  string              `protobuf:"bytes,4,opt,name=MatchedDestId,proto3" json:"MatchedDestId,omitempty"`
	ActivationTime *protobuf.Timestamp `protobuf:"bytes,5,opt,name=ActivationTime,proto3" json:"ActivationTime,omitempty"`
	RateIntervals  []*RateInterval     `protobuf:"bytes,6,rep,name=RateIntervals,proto3" json:"RateIntervals,omitempty"`
	FallbackKeys   []string            `protobuf:"bytes,7,rep,name=FallbackKeys,proto3" json:"FallbackKeys,omitempty"`
}

func (m *RatingInfo) Reset()         { *m = RatingInfo{} }
func (m *RatingInfo) String() string { return proto.CompactTextString(m) }
func (*RatingInfo) ProtoMessage()    {}
func (*RatingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{6}
}
func (m *RatingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RatingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RatingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RatingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RatingInfo.Merge(m, src)
}
func (m *RatingInfo) XXX_Size() int {
	return m.Size()
}
func (m *RatingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RatingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RatingInfo proto.InternalMessageInfo

func (m *RatingInfo) GetMatchedSubject() string {
	if m != nil {
		return m.MatchedSubject
	}
	return ""
}

func (m *RatingInfo) GetRatingPlanId() string {
	if m != nil {
		return m.RatingPlanId
	}
	return ""
}

func (m *RatingInfo) GetMatchedPrefix() string {
	if m != nil {
		return m.MatchedPrefix
	}
	return ""
}

func (m *RatingInfo) GetMatchedDestId() string {
	if m != nil {
		return m.MatchedDestId
	}
	return ""
}

func (m *RatingInfo) GetActivationTime() *protobuf.Timestamp {
	if m != nil {
		return m.ActivationTime
	}
	return nil
}

func (m *RatingInfo) GetRateIntervals() []*RateInterval {
	if m != nil {
		return m.RateIntervals
	}
	return nil
}

func (m *RatingInfo) GetFallbackKeys() []string {
	if m != nil {
		return m.FallbackKeys
	}
	return nil
}

type UnitInfo struct {
	UUID          string        `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ID            string        `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Value         float64       `protobuf:"fixed64,3,opt,name=Value,proto3" json:"Value,omitempty"`
	DestinationID string        `protobuf:"bytes,4,opt,name=DestinationID,proto3" json:"DestinationID,omitempty"`
	Consumed      float64       `protobuf:"fixed64,5,opt,name=Consumed,proto3" json:"Consumed,omitempty"`
	TOR           string        `protobuf:"bytes,6,opt,name=TOR,proto3" json:"TOR,omitempty"`
	RateInterval  *RateInterval `protobuf:"bytes,7,opt,name=RateInterval,proto3" json:"RateInterval,omitempty"`
}

func (m *UnitInfo) Reset()         { *m = UnitInfo{} }
func (m *UnitInfo) String() string { return proto.CompactTextString(m) }
func (*UnitInfo) ProtoMessage()    {}
func (*UnitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{7}
}
func (m *UnitInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnitInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnitInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnitInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnitInfo.Merge(m, src)
}
func (m *UnitInfo) XXX_Size() int {
	return m.Size()
}
func (m *UnitInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UnitInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UnitInfo proto.InternalMessageInfo

func (m *UnitInfo) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *UnitInfo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *UnitInfo) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *UnitInfo) GetDestinationID() string {
	if m != nil {
		return m.DestinationID
	}
	return ""
}

func (m *UnitInfo) GetConsumed() float64 {
	if m != nil {
		return m.Consumed
	}
	return 0
}

func (m *UnitInfo) GetTOR() string {
	if m != nil {
		return m.TOR
	}
	return ""
}

func (m *UnitInfo) GetRateInterval() *RateInterval {
	if m != nil {
		return m.RateInterval
	}
	return nil
}

type MonetaryInfo struct {
	UUID         string        `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	ID           string        `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Value        float64       `protobuf:"fixed64,3,opt,name=Value,proto3" json:"Value,omitempty"`
	RateInterval *RateInterval `protobuf:"bytes,4,opt,name=RateInterval,proto3" json:"RateInterval,omitempty"`
}

func (m *MonetaryInfo) Reset()         { *m = MonetaryInfo{} }
func (m *MonetaryInfo) String() string { return proto.CompactTextString(m) }
func (*MonetaryInfo) ProtoMessage()    {}
func (*MonetaryInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{8}
}
func (m *MonetaryInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MonetaryInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MonetaryInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MonetaryInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MonetaryInfo.Merge(m, src)
}
func (m *MonetaryInfo) XXX_Size() int {
	return m.Size()
}
func (m *MonetaryInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MonetaryInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MonetaryInfo proto.InternalMessageInfo

func (m *MonetaryInfo) GetUUID() string {
	if m != nil {
		return m.UUID
	}
	return ""
}

func (m *MonetaryInfo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *MonetaryInfo) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *MonetaryInfo) GetRateInterval() *RateInterval {
	if m != nil {
		return m.RateInterval
	}
	return nil
}

type DebitInfo struct {
	Unit      *UnitInfo     `protobuf:"bytes,1,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Monetary  *MonetaryInfo `protobuf:"bytes,2,opt,name=Monetary,proto3" json:"Monetary,omitempty"`
	AccountID string        `protobuf:"bytes,3,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
}

func (m *DebitInfo) Reset()         { *m = DebitInfo{} }
func (m *DebitInfo) String() string { return proto.CompactTextString(m) }
func (*DebitInfo) ProtoMessage()    {}
func (*DebitInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{9}
}
func (m *DebitInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebitInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebitInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DebitInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebitInfo.Merge(m, src)
}
func (m *DebitInfo) XXX_Size() int {
	return m.Size()
}
func (m *DebitInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DebitInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DebitInfo proto.InternalMessageInfo

func (m *DebitInfo) GetUnit() *UnitInfo {
	if m != nil {
		return m.Unit
	}
	return nil
}

func (m *DebitInfo) GetMonetary() *MonetaryInfo {
	if m != nil {
		return m.Monetary
	}
	return nil
}

func (m *DebitInfo) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

type Increment struct {
	Duration       *protobuf.Timestamp `protobuf:"bytes,1,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Cost           float64             `protobuf:"fixed64,2,opt,name=Cost,proto3" json:"Cost,omitempty"`
	BalanceInfo    *DebitInfo          `protobuf:"bytes,3,opt,name=BalanceInfo,proto3" json:"BalanceInfo,omitempty"`
	CompressFactor int32               `protobuf:"varint,4,opt,name=CompressFactor,proto3" json:"CompressFactor,omitempty"`
	Paid           bool                `protobuf:"varint,5,opt,name=paid,proto3" json:"paid,omitempty"`
}

func (m *Increment) Reset()         { *m = Increment{} }
func (m *Increment) String() string { return proto.CompactTextString(m) }
func (*Increment) ProtoMessage()    {}
func (*Increment) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{10}
}
func (m *Increment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Increment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Increment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Increment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Increment.Merge(m, src)
}
func (m *Increment) XXX_Size() int {
	return m.Size()
}
func (m *Increment) XXX_DiscardUnknown() {
	xxx_messageInfo_Increment.DiscardUnknown(m)
}

var xxx_messageInfo_Increment proto.InternalMessageInfo

func (m *Increment) GetDuration() *protobuf.Timestamp {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Increment) GetCost() float64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *Increment) GetBalanceInfo() *DebitInfo {
	if m != nil {
		return m.BalanceInfo
	}
	return nil
}

func (m *Increment) GetCompressFactor() int32 {
	if m != nil {
		return m.CompressFactor
	}
	return 0
}

func (m *Increment) GetPaid() bool {
	if m != nil {
		return m.Paid
	}
	return false
}

type TimeSpan struct {
	TimeStart      *protobuf.Timestamp `protobuf:"bytes,1,opt,name=TimeStart,proto3" json:"TimeStart,omitempty"`
	TimeEnd        *protobuf.Timestamp `protobuf:"bytes,2,opt,name=TimeEnd,proto3" json:"TimeEnd,omitempty"`
	Cost           float64             `protobuf:"fixed64,3,opt,name=Cost,proto3" json:"Cost,omitempty"`
	RateInterval   *RateInterval       `protobuf:"bytes,4,opt,name=RateInterval,proto3" json:"RateInterval,omitempty"`
	DurationIndex  *protobuf.Duration  `protobuf:"bytes,5,opt,name=DurationIndex,proto3" json:"DurationIndex,omitempty"`
	Increments     []*Increment        `protobuf:"bytes,6,rep,name=Increments,proto3" json:"Increments,omitempty"`
	RoundIncrement *Increment          `protobuf:"bytes,7,opt,name=RoundIncrement,proto3" json:"RoundIncrement,omitempty"`
	MatchedSubject string              `protobuf:"bytes,8,opt,name=MatchedSubject,proto3" json:"MatchedSubject,omitempty"`
	MatchedPrefix  string              `protobuf:"bytes,9,opt,name=MatchedPrefix,proto3" json:"MatchedPrefix,omitempty"`
	MatchedDestId  string              `protobuf:"bytes,10,opt,name=MatchedDestId,proto3" json:"MatchedDestId,omitempty"`
	RatingPlanId   string              `protobuf:"bytes,11,opt,name=RatingPlanId,proto3" json:"RatingPlanId,omitempty"`
	CompressFactor int32               `protobuf:"varint,12,opt,name=CompressFactor,proto3" json:"CompressFactor,omitempty"`
	RatingInfo     *RatingInfo         `protobuf:"bytes,13,opt,name=ratingInfo,proto3" json:"ratingInfo,omitempty"`
}

func (m *TimeSpan) Reset()         { *m = TimeSpan{} }
func (m *TimeSpan) String() string { return proto.CompactTextString(m) }
func (*TimeSpan) ProtoMessage()    {}
func (*TimeSpan) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{11}
}
func (m *TimeSpan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeSpan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeSpan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeSpan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeSpan.Merge(m, src)
}
func (m *TimeSpan) XXX_Size() int {
	return m.Size()
}
func (m *TimeSpan) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeSpan.DiscardUnknown(m)
}

var xxx_messageInfo_TimeSpan proto.InternalMessageInfo

func (m *TimeSpan) GetTimeStart() *protobuf.Timestamp {
	if m != nil {
		return m.TimeStart
	}
	return nil
}

func (m *TimeSpan) GetTimeEnd() *protobuf.Timestamp {
	if m != nil {
		return m.TimeEnd
	}
	return nil
}

func (m *TimeSpan) GetCost() float64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *TimeSpan) GetRateInterval() *RateInterval {
	if m != nil {
		return m.RateInterval
	}
	return nil
}

func (m *TimeSpan) GetDurationIndex() *protobuf.Duration {
	if m != nil {
		return m.DurationIndex
	}
	return nil
}

func (m *TimeSpan) GetIncrements() []*Increment {
	if m != nil {
		return m.Increments
	}
	return nil
}

func (m *TimeSpan) GetRoundIncrement() *Increment {
	if m != nil {
		return m.RoundIncrement
	}
	return nil
}

func (m *TimeSpan) GetMatchedSubject() string {
	if m != nil {
		return m.MatchedSubject
	}
	return ""
}

func (m *TimeSpan) GetMatchedPrefix() string {
	if m != nil {
		return m.MatchedPrefix
	}
	return ""
}

func (m *TimeSpan) GetMatchedDestId() string {
	if m != nil {
		return m.MatchedDestId
	}
	return ""
}

func (m *TimeSpan) GetRatingPlanId() string {
	if m != nil {
		return m.RatingPlanId
	}
	return ""
}

func (m *TimeSpan) GetCompressFactor() int32 {
	if m != nil {
		return m.CompressFactor
	}
	return 0
}

func (m *TimeSpan) GetRatingInfo() *RatingInfo {
	if m != nil {
		return m.RatingInfo
	}
	return nil
}

type CallCost struct {
	Category           string          `protobuf:"bytes,1,opt,name=Category,proto3" json:"Category,omitempty"`
	Tenant             string          `protobuf:"bytes,2,opt,name=Tenant,proto3" json:"Tenant,omitempty"`
	Subject            string          `protobuf:"bytes,3,opt,name=Subject,proto3" json:"Subject,omitempty"`
	Account            string          `protobuf:"bytes,4,opt,name=Account,proto3" json:"Account,omitempty"`
	Destination        string          `protobuf:"bytes,5,opt,name=Destination,proto3" json:"Destination,omitempty"`
	TOR                string          `protobuf:"bytes,6,opt,name=TOR,proto3" json:"TOR,omitempty"`
	Cost               float64         `protobuf:"fixed64,7,opt,name=Cost,proto3" json:"Cost,omitempty"`
	Timespans          []*TimeSpan     `protobuf:"bytes,8,rep,name=Timespans,proto3" json:"Timespans,omitempty"`
	RatedUsage         float64         `protobuf:"fixed64,9,opt,name=RatedUsage,proto3" json:"RatedUsage,omitempty"`
	AccountSummary     *AccountSummary `protobuf:"bytes,10,opt,name=AccountSummary,proto3" json:"AccountSummary,omitempty"`
	DeductConnectFee   bool            `protobuf:"varint,11,opt,name=deductConnectFee,proto3" json:"deductConnectFee,omitempty"`
	NegativeConnectFee bool            `protobuf:"varint,12,opt,name=negativeConnectFee,proto3" json:"negativeConnectFee,omitempty"`
	MaxCostDisconect   bool            `protobuf:"varint,13,opt,name=maxCostDisconect,proto3" json:"maxCostDisconect,omitempty"`
}

func (m *CallCost) Reset()         { *m = CallCost{} }
func (m *CallCost) String() string { return proto.CompactTextString(m) }
func (*CallCost) ProtoMessage()    {}
func (*CallCost) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{12}
}
func (m *CallCost) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallCost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallCost.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallCost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallCost.Merge(m, src)
}
func (m *CallCost) XXX_Size() int {
	return m.Size()
}
func (m *CallCost) XXX_DiscardUnknown() {
	xxx_messageInfo_CallCost.DiscardUnknown(m)
}

var xxx_messageInfo_CallCost proto.InternalMessageInfo

func (m *CallCost) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *CallCost) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *CallCost) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *CallCost) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *CallCost) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *CallCost) GetTOR() string {
	if m != nil {
		return m.TOR
	}
	return ""
}

func (m *CallCost) GetCost() float64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *CallCost) GetTimespans() []*TimeSpan {
	if m != nil {
		return m.Timespans
	}
	return nil
}

func (m *CallCost) GetRatedUsage() float64 {
	if m != nil {
		return m.RatedUsage
	}
	return 0
}

func (m *CallCost) GetAccountSummary() *AccountSummary {
	if m != nil {
		return m.AccountSummary
	}
	return nil
}

func (m *CallCost) GetDeductConnectFee() bool {
	if m != nil {
		return m.DeductConnectFee
	}
	return false
}

func (m *CallCost) GetNegativeConnectFee() bool {
	if m != nil {
		return m.NegativeConnectFee
	}
	return false
}

func (m *CallCost) GetMaxCostDisconect() bool {
	if m != nil {
		return m.MaxCostDisconect
	}
	return false
}

type CallDescriptor struct {
	Category            string              `protobuf:"bytes,1,opt,name=Category,proto3" json:"Category,omitempty"`
	Tenant              string              `protobuf:"bytes,2,opt,name=Tenant,proto3" json:"Tenant,omitempty"`
	Subject             string              `protobuf:"bytes,3,opt,name=Subject,proto3" json:"Subject,omitempty"`
	Account             string              `protobuf:"bytes,4,opt,name=Account,proto3" json:"Account,omitempty"`
	Destination         string              `protobuf:"bytes,5,opt,name=Destination,proto3" json:"Destination,omitempty"`
	TimeStart           *protobuf.Timestamp `protobuf:"bytes,6,opt,name=TimeStart,proto3" json:"TimeStart,omitempty"`
	TimeEnd             *protobuf.Timestamp `protobuf:"bytes,7,opt,name=TimeEnd,proto3" json:"TimeEnd,omitempty"`
	LoopIndex           float64             `protobuf:"fixed64,8,opt,name=LoopIndex,proto3" json:"LoopIndex,omitempty"`
	DurationIndex       *protobuf.Duration  `protobuf:"bytes,9,opt,name=DurationIndex,proto3" json:"DurationIndex,omitempty"`
	FallbackSubject     string              `protobuf:"bytes,10,opt,name=FallbackSubject,proto3" json:"FallbackSubject,omitempty"`
	RatingInfos         []*RatingInfo       `protobuf:"bytes,11,rep,name=RatingInfos,proto3" json:"RatingInfos,omitempty"`
	Increments          []*Increment        `protobuf:"bytes,12,rep,name=Increments,proto3" json:"Increments,omitempty"`
	TOR                 string              `protobuf:"bytes,13,opt,name=TOR,proto3" json:"TOR,omitempty"`
	ExtraFields         map[string]string   `protobuf:"bytes,14,rep,name=ExtraFields,proto3" json:"ExtraFields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MaxRate             float64             `protobuf:"fixed64,15,opt,name=MaxRate,proto3" json:"MaxRate,omitempty"`
	MaxRateUnit         *protobuf.Duration  `protobuf:"bytes,16,opt,name=MaxRateUnit,proto3" json:"MaxRateUnit,omitempty"`
	MaxCostSoFar        float64             `protobuf:"fixed64,17,opt,name=MaxCostSoFar,proto3" json:"MaxCostSoFar,omitempty"`
	CgrID               string              `protobuf:"bytes,18,opt,name=CgrID,proto3" json:"CgrID,omitempty"`
	RunID               string              `protobuf:"bytes,19,opt,name=RunID,proto3" json:"RunID,omitempty"`
	ForceDuration       bool                `protobuf:"varint,20,opt,name=ForceDuration,proto3" json:"ForceDuration,omitempty"`
	PerformRounding     bool                `protobuf:"varint,21,opt,name=PerformRounding,proto3" json:"PerformRounding,omitempty"`
	DryRun              bool                `protobuf:"varint,22,opt,name=DryRun,proto3" json:"DryRun,omitempty"`
	DenyNegativeAccount bool                `protobuf:"varint,23,opt,name=DenyNegativeAccount,proto3" json:"DenyNegativeAccount,omitempty"`
	TestCallcost        *CallCost           `protobuf:"bytes,24,opt,name=testCallcost,proto3" json:"testCallcost,omitempty"`
}

func (m *CallDescriptor) Reset()         { *m = CallDescriptor{} }
func (m *CallDescriptor) String() string { return proto.CompactTextString(m) }
func (*CallDescriptor) ProtoMessage()    {}
func (*CallDescriptor) Descriptor() ([]byte, []int) {
	return fileDescriptor_b20c269f3196566b, []int{13}
}
func (m *CallDescriptor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CallDescriptor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CallDescriptor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CallDescriptor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CallDescriptor.Merge(m, src)
}
func (m *CallDescriptor) XXX_Size() int {
	return m.Size()
}
func (m *CallDescriptor) XXX_DiscardUnknown() {
	xxx_messageInfo_CallDescriptor.DiscardUnknown(m)
}

var xxx_messageInfo_CallDescriptor proto.InternalMessageInfo

func (m *CallDescriptor) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *CallDescriptor) GetTenant() string {
	if m != nil {
		return m.Tenant
	}
	return ""
}

func (m *CallDescriptor) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *CallDescriptor) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *CallDescriptor) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *CallDescriptor) GetTimeStart() *protobuf.Timestamp {
	if m != nil {
		return m.TimeStart
	}
	return nil
}

func (m *CallDescriptor) GetTimeEnd() *protobuf.Timestamp {
	if m != nil {
		return m.TimeEnd
	}
	return nil
}

func (m *CallDescriptor) GetLoopIndex() float64 {
	if m != nil {
		return m.LoopIndex
	}
	return 0
}

func (m *CallDescriptor) GetDurationIndex() *protobuf.Duration {
	if m != nil {
		return m.DurationIndex
	}
	return nil
}

func (m *CallDescriptor) GetFallbackSubject() string {
	if m != nil {
		return m.FallbackSubject
	}
	return ""
}

func (m *CallDescriptor) GetRatingInfos() []*RatingInfo {
	if m != nil {
		return m.RatingInfos
	}
	return nil
}

func (m *CallDescriptor) GetIncrements() []*Increment {
	if m != nil {
		return m.Increments
	}
	return nil
}

func (m *CallDescriptor) GetTOR() string {
	if m != nil {
		return m.TOR
	}
	return ""
}

func (m *CallDescriptor) GetExtraFields() map[string]string {
	if m != nil {
		return m.ExtraFields
	}
	return nil
}

func (m *CallDescriptor) GetMaxRate() float64 {
	if m != nil {
		return m.MaxRate
	}
	return 0
}

func (m *CallDescriptor) GetMaxRateUnit() *protobuf.Duration {
	if m != nil {
		return m.MaxRateUnit
	}
	return nil
}

func (m *CallDescriptor) GetMaxCostSoFar() float64 {
	if m != nil {
		return m.MaxCostSoFar
	}
	return 0
}

func (m *CallDescriptor) GetCgrID() string {
	if m != nil {
		return m.CgrID
	}
	return ""
}

func (m *CallDescriptor) GetRunID() string {
	if m != nil {
		return m.RunID
	}
	return ""
}

func (m *CallDescriptor) GetForceDuration() bool {
	if m != nil {
		return m.ForceDuration
	}
	return false
}

func (m *CallDescriptor) GetPerformRounding() bool {
	if m != nil {
		return m.PerformRounding
	}
	return false
}

func (m *CallDescriptor) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

func (m *CallDescriptor) GetDenyNegativeAccount() bool {
	if m != nil {
		return m.DenyNegativeAccount
	}
	return false
}

func (m *CallDescriptor) GetTestCallcost() *CallCost {
	if m != nil {
		return m.TestCallcost
	}
	return nil
}

func init() {
	proto.RegisterType((*BalanceSummary)(nil), "rpcbench.BalanceSummary")
	proto.RegisterType((*AccountSummary)(nil), "rpcbench.AccountSummary")
	proto.RegisterType((*Rate)(nil), "rpcbench.Rate")
	proto.RegisterType((*RIRate)(nil), "rpcbench.RIRate")
	proto.RegisterType((*RITiming)(nil), "rpcbench.RITiming")
	proto.RegisterType((*RateInterval)(nil), "rpcbench.RateInterval")
	proto.RegisterType((*RatingInfo)(nil), "rpcbench.RatingInfo")
	proto.RegisterType((*UnitInfo)(nil), "rpcbench.UnitInfo")
	proto.RegisterType((*MonetaryInfo)(nil), "rpcbench.MonetaryInfo")
	proto.RegisterType((*DebitInfo)(nil), "rpcbench.DebitInfo")
	proto.RegisterType((*Increment)(nil), "rpcbench.Increment")
	proto.RegisterType((*TimeSpan)(nil), "rpcbench.TimeSpan")
	proto.RegisterType((*CallCost)(nil), "rpcbench.CallCost")
	proto.RegisterType((*CallDescriptor)(nil), "rpcbench.CallDescriptor")
	proto.RegisterMapType((map[string]string)(nil), "rpcbench.CallDescriptor.ExtraFieldsEntry")
}

func init() { proto.RegisterFile("calld.proto", fileDescriptor_b20c269f3196566b) }

var fileDescriptor_b20c269f3196566b = []byte{
	// 1526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4d, 0x6f, 0xdb, 0xc6,
	0x16, 0x0d, 0x25, 0x5b, 0xa2, 0xae, 0x6c, 0xc7, 0x6f, 0x92, 0x97, 0xc7, 0x67, 0x04, 0x7a, 0x82,
	0x10, 0x04, 0x7a, 0x59, 0x28, 0x81, 0xf3, 0x81, 0x20, 0x29, 0xda, 0x26, 0xa6, 0x5d, 0x10, 0xa9,
	0xdb, 0x60, 0x6c, 0x37, 0xe8, 0x72, 0x44, 0x8e, 0x65, 0x36, 0xd4, 0x50, 0x20, 0x47, 0xae, 0x55,
	0x74, 0xd9, 0xee, 0xbb, 0xec, 0xcf, 0xe9, 0xb2, 0xc8, 0x2a, 0x8b, 0xa2, 0xe8, 0xa2, 0x40, 0x8b,
	0xe4, 0x27, 0x74, 0xd3, 0x65, 0x31, 0xc3, 0x19, 0x72, 0x48, 0xa9, 0xaa, 0xd3, 0x6c, 0xba, 0x9b,
	0x7b, 0xe6, 0x90, 0x9c, 0xfb, 0x75, 0xe6, 0x12, 0xda, 0x3e, 0x89, 0xa2, 0x60, 0x30, 0x49, 0x62,
	0x1e, 0x23, 0x3b, 0x99, 0xf8, 0x43, 0xca, 0xfc, 0x93, 0xad, 0xff, 0x8d, 0xe2, 0x78, 0x14, 0xd1,
	0x9b, 0x12, 0x1f, 0x4e, 0x8f, 0x6f, 0xf2, 0x70, 0x4c, 0x53, 0x4e, 0xc6, 0x93, 0x8c, 0xba, 0xd5,
	0xa9, 0x12, 0x82, 0x69, 0x42, 0x78, 0x18, 0xb3, 0x6c, 0xbf, 0xf7, 0x05, 0x6c, 0x3c, 0x26, 0x11,
	0x61, 0x3e, 0x3d, 0x98, 0x8e, 0xc7, 0x24, 0x99, 0x21, 0x04, 0x2b, 0x47, 0x47, 0x9e, 0xeb, 0x58,
	0x5d, 0xab, 0xdf, 0xc2, 0x72, 0x8d, 0x36, 0xa0, 0xe6, 0xb9, 0x4e, 0x4d, 0x22, 0x35, 0xcf, 0x15,
	0x9c, 0xc3, 0xd9, 0x84, 0x3a, 0xf5, 0x8c, 0x23, 0xd6, 0xe8, 0x32, 0xac, 0x7e, 0x42, 0xa2, 0x29,
	0x75, 0x56, 0xba, 0x56, 0xdf, 0xc2, 0x99, 0x81, 0xb6, 0xc0, 0x76, 0xc3, 0x94, 0x0c, 0x23, 0x1a,
	0x38, 0xab, 0x5d, 0xab, 0x6f, 0xe3, 0xdc, 0xee, 0x7d, 0x67, 0xc1, 0xc6, 0x23, 0xdf, 0x8f, 0xa7,
	0x8c, 0xeb, 0x8f, 0x5f, 0x81, 0xc6, 0x21, 0x65, 0x84, 0x71, 0xf5, 0x79, 0x65, 0xcd, 0x1d, 0xc0,
	0x85, 0xcd, 0xd2, 0xb1, 0x43, 0x9a, 0x3a, 0xf5, 0x6e, 0xbd, 0xdf, 0xde, 0x76, 0x06, 0x3a, 0x38,
	0x83, 0xb2, 0x63, 0x78, 0xee, 0x09, 0x74, 0x0d, 0xd6, 0x1f, 0x45, 0x51, 0xfc, 0xf9, 0x47, 0x74,
	0x44, 0x78, 0x78, 0x9a, 0x1d, 0xdd, 0xc6, 0x65, 0x70, 0xa9, 0x0b, 0xbf, 0x58, 0xb0, 0x82, 0x09,
	0xa7, 0xc8, 0x03, 0xf4, 0x41, 0x12, 0x4f, 0x27, 0x1e, 0xe3, 0x34, 0x39, 0x25, 0xd1, 0x01, 0x27,
	0x49, 0xe6, 0x44, 0x7b, 0xfb, 0xbf, 0x83, 0x2c, 0x09, 0x03, 0x9d, 0x84, 0x81, 0xab, 0x92, 0x80,
	0x17, 0x3c, 0x54, 0x04, 0xb2, 0x66, 0x06, 0xf2, 0x3d, 0x58, 0x17, 0x1f, 0xf2, 0x98, 0x9f, 0xd0,
	0x31, 0x65, 0x5c, 0xc6, 0x7e, 0xe9, 0xbb, 0xcb, 0x7c, 0x74, 0x17, 0x6c, 0x01, 0x1c, 0xb1, 0x90,
	0x4b, 0x3f, 0x97, 0x3e, 0x9b, 0x53, 0x7b, 0xbf, 0x5b, 0xd0, 0xc0, 0x9e, 0xf4, 0xb1, 0x03, 0xb0,
	0x13, 0x33, 0x46, 0x7d, 0xbe, 0x47, 0xa9, 0xf4, 0xcd, 0xc2, 0x06, 0x82, 0xae, 0xc3, 0x06, 0x8e,
	0xa7, 0x2c, 0x08, 0xd9, 0x68, 0x9f, 0xf2, 0x93, 0x38, 0x50, 0x09, 0xab, 0xa0, 0xe8, 0x06, 0x6c,
	0x6a, 0xc4, 0xa5, 0x7e, 0x38, 0x26, 0x51, 0x2a, 0xbd, 0x59, 0xc5, 0x73, 0x38, 0x72, 0xa0, 0xb9,
	0x4f, 0xce, 0x76, 0xe2, 0x94, 0xab, 0xba, 0xd2, 0x26, 0xea, 0xc3, 0x45, 0xb5, 0x3c, 0xe0, 0x09,
	0xe1, 0x74, 0x34, 0x93, 0xd9, 0x69, 0xe1, 0x2a, 0x8c, 0xae, 0xc1, 0xaa, 0x38, 0x7f, 0xea, 0x34,
	0x64, 0x85, 0x6c, 0x14, 0x15, 0x22, 0x60, 0x9c, 0x6d, 0xa2, 0x4d, 0xa8, 0x73, 0x32, 0x72, 0x9a,
	0xf2, 0x1d, 0x62, 0xd9, 0xfb, 0xd9, 0x02, 0x1b, 0x7b, 0x87, 0xe1, 0x38, 0x64, 0x23, 0x91, 0x95,
	0x4f, 0x29, 0x49, 0x52, 0xc7, 0xea, 0xd6, 0xfb, 0xab, 0x38, 0x33, 0x44, 0xbd, 0xee, 0xc7, 0x8c,
	0x9f, 0xa4, 0x4e, 0x4d, 0xc2, 0xca, 0x42, 0x57, 0xa1, 0x25, 0x57, 0x2e, 0x99, 0x65, 0x85, 0xb9,
	0x8a, 0x0b, 0x40, 0x54, 0xd4, 0x33, 0x4a, 0x9f, 0xcb, 0xcd, 0x15, 0xb9, 0x99, 0xdb, 0xe2, 0x49,
	0x59, 0x06, 0x87, 0xe1, 0x98, 0x2a, 0x87, 0x0a, 0x40, 0x84, 0x63, 0x97, 0x05, 0x72, 0xaf, 0x21,
	0xf7, 0xb4, 0x29, 0x92, 0xe3, 0x27, 0x31, 0x3b, 0xe0, 0x49, 0xc8, 0xb4, 0x17, 0x06, 0xa2, 0xdd,
	0xb3, 0x0b, 0xf7, 0xbe, 0x84, 0xb5, 0xac, 0x42, 0xb2, 0xe2, 0x43, 0x37, 0xa0, 0x91, 0xf9, 0xaa,
	0xca, 0x16, 0x19, 0x71, 0x52, 0x51, 0xc0, 0x8a, 0x81, 0xfa, 0xd0, 0xc0, 0x84, 0x0b, 0x6e, 0x4d,
	0x72, 0x37, 0x4d, 0xae, 0x8c, 0xaa, 0xda, 0x17, 0x11, 0x7a, 0x46, 0xc3, 0xd1, 0x49, 0x56, 0xb0,
	0x16, 0x56, 0x56, 0xef, 0x45, 0x0d, 0x20, 0xa3, 0x78, 0xec, 0x38, 0x16, 0xb5, 0xb3, 0x4f, 0xb8,
	0x7f, 0x42, 0x83, 0x83, 0xe9, 0xf0, 0x33, 0xea, 0x6b, 0x01, 0xa8, 0xa0, 0xa8, 0x27, 0x0f, 0x1d,
	0xb2, 0xd1, 0xd3, 0x88, 0x30, 0x4f, 0x57, 0x58, 0x09, 0x13, 0x6d, 0xad, 0x9e, 0x7a, 0x9a, 0xd0,
	0xe3, 0xf0, 0x4c, 0xc9, 0x54, 0x19, 0x34, 0x58, 0x2e, 0x4d, 0xb9, 0x17, 0xc8, 0xfa, 0x2a, 0x58,
	0x19, 0x88, 0x1e, 0x0b, 0x89, 0xe2, 0xe1, 0xa9, 0x6c, 0x8b, 0x3c, 0x27, 0xed, 0xed, 0xad, 0xb9,
	0xde, 0x39, 0xd4, 0xca, 0x8b, 0x2b, 0x4f, 0xa0, 0x77, 0x74, 0xeb, 0x66, 0x81, 0xd6, 0x75, 0x78,
	0xa5, 0x5c, 0x87, 0x7a, 0x1b, 0x97, 0xc9, 0xc2, 0xe3, 0x3d, 0x12, 0x45, 0x43, 0xe2, 0x3f, 0x7f,
	0x42, 0x67, 0xa9, 0xd3, 0xec, 0xd6, 0x85, 0xc7, 0x26, 0xd6, 0xfb, 0xc1, 0x02, 0x5b, 0x74, 0xab,
	0x0c, 0xe5, 0x79, 0x04, 0x3c, 0xd7, 0x98, 0xba, 0xa9, 0x31, 0xd7, 0x60, 0x5d, 0xb8, 0x1d, 0x32,
	0x79, 0x76, 0xcf, 0xd5, 0x21, 0x29, 0x81, 0xa2, 0x7a, 0x77, 0x62, 0x96, 0x4e, 0xc7, 0x4a, 0x0f,
	0x2d, 0x9c, 0xdb, 0xa2, 0xca, 0x0e, 0x3f, 0xc6, 0xaa, 0x36, 0xc5, 0x12, 0x3d, 0x28, 0x57, 0x99,
	0xac, 0xcc, 0x3f, 0xf7, 0xbd, 0xc4, 0xed, 0x7d, 0x65, 0xc1, 0xda, 0x7e, 0xcc, 0x28, 0x27, 0xc9,
	0xec, 0x2d, 0x5d, 0xab, 0x1e, 0x63, 0xe5, 0x0d, 0x8e, 0xf1, 0xb5, 0x05, 0x2d, 0x97, 0x0e, 0x55,
	0x78, 0xaf, 0xc3, 0x8a, 0xd4, 0xd0, 0xb9, 0x26, 0xd1, 0x09, 0xc0, 0x72, 0x1f, 0x6d, 0x83, 0xad,
	0xcf, 0xae, 0x9a, 0xc4, 0xf8, 0x9a, 0xe9, 0x15, 0xce, 0x79, 0xa2, 0xf9, 0xd5, 0x85, 0xe8, 0xb9,
	0xaa, 0x6a, 0x0b, 0xa0, 0xf7, 0xc2, 0x82, 0x56, 0xa1, 0xe7, 0xf7, 0xc0, 0xd6, 0x72, 0xad, 0xce,
	0xb2, 0xac, 0x26, 0x73, 0xae, 0x88, 0xa1, 0x94, 0xd3, 0xec, 0x76, 0x91, 0x6b, 0x74, 0x17, 0xda,
	0xea, 0x72, 0x14, 0x07, 0x52, 0x57, 0xcb, 0xa5, 0xe2, 0xb8, 0xb9, 0xf7, 0xd8, 0xe4, 0x89, 0xa6,
	0xdd, 0x89, 0xc7, 0x93, 0x84, 0xa6, 0xe9, 0x1e, 0xf1, 0x79, 0x9c, 0xc8, 0xb0, 0xae, 0xe2, 0x0a,
	0x2a, 0x3e, 0x39, 0x21, 0xa1, 0xbe, 0x3d, 0xe5, 0xba, 0xf7, 0xdb, 0x0a, 0xd8, 0xe2, 0x78, 0x07,
	0x13, 0xc2, 0xd0, 0x7d, 0x68, 0xc9, 0xb5, 0x71, 0x69, 0x2e, 0x73, 0xa6, 0x20, 0xa3, 0x3b, 0xd0,
	0x14, 0xc6, 0x2e, 0x0b, 0x54, 0x90, 0x97, 0x3d, 0xa7, 0xa9, 0x79, 0x0c, 0xea, 0x46, 0x0c, 0xde,
	0xa2, 0x42, 0xc4, 0xe5, 0xac, 0xe3, 0xeb, 0xb1, 0x80, 0x9e, 0x29, 0x91, 0x58, 0x76, 0x39, 0x97,
	0xf8, 0xe8, 0x36, 0x40, 0x9e, 0x59, 0xad, 0x0f, 0x46, 0xfc, 0xf3, 0x3d, 0x6c, 0xd0, 0xd0, 0x43,
	0x75, 0xdf, 0x16, 0x33, 0x41, 0xb3, 0x9a, 0xb8, 0xe2, 0xc1, 0x0a, 0x75, 0x81, 0xe0, 0xda, 0x0b,
	0x05, 0x77, 0x4e, 0x4c, 0x5b, 0xe7, 0x12, 0x53, 0x58, 0x24, 0xa6, 0x55, 0xf1, 0x6e, 0x2f, 0x10,
	0xef, 0xf9, 0x9a, 0x5a, 0x5b, 0x58, 0x53, 0x77, 0x00, 0x92, 0xfc, 0xfa, 0x70, 0xd6, 0xa5, 0xe3,
	0x97, 0x4b, 0xc9, 0x52, 0x7b, 0xd8, 0xe0, 0xf5, 0x7e, 0xac, 0x83, 0xbd, 0x43, 0xa2, 0x48, 0x66,
	0x5c, 0x08, 0x99, 0x98, 0x10, 0xe2, 0x64, 0xa6, 0x14, 0x25, 0xb7, 0x8d, 0x41, 0xb4, 0x56, 0x1a,
	0x44, 0x1d, 0x68, 0xea, 0x78, 0x65, 0xfd, 0xa9, 0x4d, 0xb1, 0xa3, 0x5a, 0x55, 0xc9, 0xa6, 0x36,
	0x51, 0x17, 0xda, 0x86, 0x82, 0xaa, 0x4b, 0xdd, 0x84, 0x16, 0xc8, 0xa6, 0xae, 0xd0, 0xa6, 0x51,
	0xa1, 0xb7, 0xb2, 0x2e, 0x49, 0x27, 0x84, 0xa5, 0x8e, 0x2d, 0x6b, 0xc4, 0x90, 0x1f, 0xdd, 0x4c,
	0xb8, 0x20, 0x89, 0xa1, 0x40, 0xd4, 0x69, 0x70, 0x94, 0x92, 0x11, 0x95, 0x99, 0xb3, 0xb0, 0x81,
	0xa0, 0xf7, 0xab, 0x03, 0xb8, 0xcc, 0x5b, 0x69, 0x88, 0x2e, 0xef, 0xe3, 0xea, 0xc0, 0x7e, 0x03,
	0x36, 0x03, 0x1a, 0x4c, 0x7d, 0x6e, 0x4c, 0x86, 0x6d, 0xd9, 0xe6, 0x73, 0x38, 0x1a, 0x00, 0x62,
	0x6a, 0xa8, 0x36, 0xd8, 0x6b, 0x92, 0xbd, 0x60, 0x47, 0xbc, 0x7b, 0x9c, 0x8d, 0x72, 0x6e, 0x98,
	0xfa, 0xb1, 0x80, 0x65, 0xa2, 0x6d, 0x3c, 0x87, 0xf7, 0xbe, 0xb5, 0x61, 0x43, 0x24, 0xd6, 0xa5,
	0xa9, 0x9f, 0x84, 0x13, 0x51, 0x21, 0xff, 0x9c, 0xf4, 0x96, 0xe4, 0xad, 0xf1, 0x37, 0xe5, 0xad,
	0x79, 0x7e, 0x79, 0xbb, 0x0a, 0xad, 0x0f, 0xe3, 0x78, 0x92, 0x49, 0x91, 0x2d, 0xb3, 0x5e, 0x00,
	0xf3, 0x62, 0xd5, 0x7a, 0x43, 0xb1, 0xea, 0xc3, 0x45, 0x3d, 0x7d, 0xe8, 0x60, 0x65, 0xed, 0x5e,
	0x85, 0xd1, 0x3d, 0x68, 0x17, 0x8d, 0x98, 0x3a, 0x6d, 0x59, 0xb3, 0x8b, 0xbb, 0xd4, 0x24, 0x56,
	0xe4, 0x70, 0xed, 0x7c, 0x72, 0xa8, 0x9a, 0x68, 0xbd, 0x68, 0xa2, 0x27, 0xd0, 0xde, 0x3d, 0xe3,
	0x09, 0xd9, 0x0b, 0x69, 0x14, 0xa4, 0xce, 0x86, 0x7c, 0xcf, 0xff, 0x8b, 0xf7, 0x94, 0x0b, 0x66,
	0x60, 0x70, 0x77, 0x19, 0x4f, 0x66, 0xd8, 0x7c, 0x5a, 0xfd, 0x89, 0x88, 0xe6, 0x71, 0x2e, 0xe6,
	0x7f, 0x22, 0xf2, 0xbf, 0xe8, 0x21, 0xb4, 0xd5, 0x52, 0x0e, 0x06, 0x9b, 0x7f, 0x15, 0x4e, 0x93,
	0x2d, 0x34, 0x51, 0xff, 0xaf, 0xc4, 0x7b, 0x24, 0x71, 0xfe, 0x25, 0xdf, 0x5d, 0xc2, 0xc4, 0x48,
	0xb3, 0x33, 0x4a, 0x3c, 0xd7, 0x41, 0xd2, 0xb7, 0xcc, 0x10, 0x28, 0x9e, 0x8a, 0x29, 0xed, 0x52,
	0x86, 0x4a, 0x43, 0x28, 0xf1, 0x5e, 0x9c, 0xf8, 0x34, 0x9f, 0x0d, 0x2e, 0x67, 0xff, 0xb4, 0x25,
	0x50, 0xa4, 0xf0, 0x29, 0x4d, 0x8e, 0xe3, 0x64, 0xac, 0xff, 0xb8, 0x9c, 0x7f, 0x4b, 0x5e, 0x15,
	0x16, 0x9d, 0xe2, 0x26, 0x33, 0x3c, 0x65, 0xce, 0x15, 0x49, 0x50, 0x16, 0xba, 0x05, 0x97, 0x5c,
	0xca, 0x66, 0xfa, 0x2f, 0x59, 0xf7, 0xc6, 0x7f, 0x24, 0x69, 0xd1, 0x16, 0xba, 0x07, 0x6b, 0x9c,
	0xa6, 0x5c, 0x04, 0xdd, 0x17, 0xd2, 0xe6, 0x54, 0x07, 0x28, 0x2d, 0xcc, 0xb8, 0xc4, 0xdb, 0x7a,
	0x17, 0x36, 0xab, 0x99, 0x11, 0xb9, 0x7e, 0x4e, 0x75, 0x5b, 0x8b, 0xa5, 0x88, 0xc6, 0x69, 0xfe,
	0xd7, 0xdc, 0xc2, 0x99, 0xf1, 0xa0, 0x76, 0xdf, 0x7a, 0xec, 0x7c, 0xff, 0xaa, 0x63, 0xbd, 0x7c,
	0xd5, 0xb1, 0x7e, 0x7d, 0xd5, 0xb1, 0xbe, 0x79, 0xdd, 0xb9, 0xf0, 0xf2, 0x75, 0xe7, 0xc2, 0x4f,
	0xaf, 0x3b, 0x17, 0x86, 0x0d, 0x99, 0x9b, 0xdb, 0x7f, 0x04, 0x00, 0x00, 0xff, 0xff, 0x78, 0x54,
	0x0b, 0xe1, 0x5d, 0x11, 0x00, 0x00,
}

func (m *BalanceSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BalanceSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BalanceSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x21
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountSummary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountSummary) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountSummary) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Disabled {
		i--
		if m.Disabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.AllowNegative {
		i--
		if m.AllowNegative {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.BalanceSummaries) > 0 {
		for iNdEx := len(m.BalanceSummaries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BalanceSummaries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalld(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Rate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateUnit != nil {
		{
			size, err := m.RateUnit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.RateIncrement != nil {
		{
			size, err := m.RateIncrement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if m.GroupIntervalStart != nil {
		{
			size, err := m.GroupIntervalStart.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RIRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RIRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RIRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Rates) > 0 {
		for iNdEx := len(m.Rates) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rates[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalld(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MaxCostStrategy) > 0 {
		i -= len(m.MaxCostStrategy)
		copy(dAtA[i:], m.MaxCostStrategy)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.MaxCostStrategy)))
		i--
		dAtA[i] = 0x2a
	}
	if m.MaxCost != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxCost))))
		i--
		dAtA[i] = 0x21
	}
	if m.RoundingDecimals != 0 {
		i = encodeVarintCalld(dAtA, i, uint64(m.RoundingDecimals))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RoundingMethod) > 0 {
		i -= len(m.RoundingMethod)
		copy(dAtA[i:], m.RoundingMethod)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.RoundingMethod)))
		i--
		dAtA[i] = 0x12
	}
	if m.ConnectFee != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ConnectFee))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *RITiming) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RITiming) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RITiming) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tag) > 0 {
		i -= len(m.Tag)
		copy(dAtA[i:], m.Tag)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Tag)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.CronString) > 0 {
		i -= len(m.CronString)
		copy(dAtA[i:], m.CronString)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.CronString)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.EndTime) > 0 {
		i -= len(m.EndTime)
		copy(dAtA[i:], m.EndTime)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.EndTime)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.StartTime) > 0 {
		i -= len(m.StartTime)
		copy(dAtA[i:], m.StartTime)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.StartTime)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.WeekDays) > 0 {
		dAtA5 := make([]byte, len(m.WeekDays)*10)
		var j4 int
		for _, num1 := range m.WeekDays {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintCalld(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MonthDays) > 0 {
		dAtA7 := make([]byte, len(m.MonthDays)*10)
		var j6 int
		for _, num1 := range m.MonthDays {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintCalld(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Months) > 0 {
		dAtA9 := make([]byte, len(m.Months)*10)
		var j8 int
		for _, num1 := range m.Months {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintCalld(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Years) > 0 {
		dAtA11 := make([]byte, len(m.Years)*10)
		var j10 int
		for _, num1 := range m.Years {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintCalld(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RateInterval) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RateInterval) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RateInterval) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Weight))))
		i--
		dAtA[i] = 0x19
	}
	if m.Rating != nil {
		{
			size, err := m.Rating.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Timing != nil {
		{
			size, err := m.Timing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RatingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RatingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RatingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FallbackKeys) > 0 {
		for iNdEx := len(m.FallbackKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FallbackKeys[iNdEx])
			copy(dAtA[i:], m.FallbackKeys[iNdEx])
			i = encodeVarintCalld(dAtA, i, uint64(len(m.FallbackKeys[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RateIntervals) > 0 {
		for iNdEx := len(m.RateIntervals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RateIntervals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalld(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.ActivationTime != nil {
		{
			size, err := m.ActivationTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MatchedDestId) > 0 {
		i -= len(m.MatchedDestId)
		copy(dAtA[i:], m.MatchedDestId)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.MatchedDestId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MatchedPrefix) > 0 {
		i -= len(m.MatchedPrefix)
		copy(dAtA[i:], m.MatchedPrefix)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.MatchedPrefix)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RatingPlanId) > 0 {
		i -= len(m.RatingPlanId)
		copy(dAtA[i:], m.RatingPlanId)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.RatingPlanId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MatchedSubject) > 0 {
		i -= len(m.MatchedSubject)
		copy(dAtA[i:], m.MatchedSubject)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.MatchedSubject)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UnitInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnitInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnitInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateInterval != nil {
		{
			size, err := m.RateInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.TOR) > 0 {
		i -= len(m.TOR)
		copy(dAtA[i:], m.TOR)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.TOR)))
		i--
		dAtA[i] = 0x32
	}
	if m.Consumed != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Consumed))))
		i--
		dAtA[i] = 0x29
	}
	if len(m.DestinationID) > 0 {
		i -= len(m.DestinationID)
		copy(dAtA[i:], m.DestinationID)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.DestinationID)))
		i--
		dAtA[i] = 0x22
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MonetaryInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MonetaryInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MonetaryInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RateInterval != nil {
		{
			size, err := m.RateInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UUID) > 0 {
		i -= len(m.UUID)
		copy(dAtA[i:], m.UUID)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.UUID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DebitInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebitInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DebitInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccountID) > 0 {
		i -= len(m.AccountID)
		copy(dAtA[i:], m.AccountID)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.AccountID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Monetary != nil {
		{
			size, err := m.Monetary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Unit != nil {
		{
			size, err := m.Unit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Increment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Increment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Increment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Paid {
		i--
		if m.Paid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.CompressFactor != 0 {
		i = encodeVarintCalld(dAtA, i, uint64(m.CompressFactor))
		i--
		dAtA[i] = 0x20
	}
	if m.BalanceInfo != nil {
		{
			size, err := m.BalanceInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Cost != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Cost))))
		i--
		dAtA[i] = 0x11
	}
	if m.Duration != nil {
		{
			size, err := m.Duration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TimeSpan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeSpan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeSpan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RatingInfo != nil {
		{
			size, err := m.RatingInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.CompressFactor != 0 {
		i = encodeVarintCalld(dAtA, i, uint64(m.CompressFactor))
		i--
		dAtA[i] = 0x60
	}
	if len(m.RatingPlanId) > 0 {
		i -= len(m.RatingPlanId)
		copy(dAtA[i:], m.RatingPlanId)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.RatingPlanId)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.MatchedDestId) > 0 {
		i -= len(m.MatchedDestId)
		copy(dAtA[i:], m.MatchedDestId)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.MatchedDestId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.MatchedPrefix) > 0 {
		i -= len(m.MatchedPrefix)
		copy(dAtA[i:], m.MatchedPrefix)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.MatchedPrefix)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MatchedSubject) > 0 {
		i -= len(m.MatchedSubject)
		copy(dAtA[i:], m.MatchedSubject)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.MatchedSubject)))
		i--
		dAtA[i] = 0x42
	}
	if m.RoundIncrement != nil {
		{
			size, err := m.RoundIncrement.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Increments) > 0 {
		for iNdEx := len(m.Increments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Increments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalld(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.DurationIndex != nil {
		{
			size, err := m.DurationIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RateInterval != nil {
		{
			size, err := m.RateInterval.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Cost != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Cost))))
		i--
		dAtA[i] = 0x19
	}
	if m.TimeEnd != nil {
		{
			size, err := m.TimeEnd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TimeStart != nil {
		{
			size, err := m.TimeStart.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CallCost) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallCost) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallCost) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxCostDisconect {
		i--
		if m.MaxCostDisconect {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.NegativeConnectFee {
		i--
		if m.NegativeConnectFee {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.DeductConnectFee {
		i--
		if m.DeductConnectFee {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.AccountSummary != nil {
		{
			size, err := m.AccountSummary.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.RatedUsage != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.RatedUsage))))
		i--
		dAtA[i] = 0x49
	}
	if len(m.Timespans) > 0 {
		for iNdEx := len(m.Timespans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Timespans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalld(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Cost != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Cost))))
		i--
		dAtA[i] = 0x39
	}
	if len(m.TOR) > 0 {
		i -= len(m.TOR)
		copy(dAtA[i:], m.TOR)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.TOR)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CallDescriptor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CallDescriptor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CallDescriptor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TestCallcost != nil {
		{
			size, err := m.TestCallcost.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.DenyNegativeAccount {
		i--
		if m.DenyNegativeAccount {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.DryRun {
		i--
		if m.DryRun {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.PerformRounding {
		i--
		if m.PerformRounding {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.ForceDuration {
		i--
		if m.ForceDuration {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.RunID) > 0 {
		i -= len(m.RunID)
		copy(dAtA[i:], m.RunID)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.RunID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.CgrID) > 0 {
		i -= len(m.CgrID)
		copy(dAtA[i:], m.CgrID)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.CgrID)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.MaxCostSoFar != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxCostSoFar))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x89
	}
	if m.MaxRateUnit != nil {
		{
			size, err := m.MaxRateUnit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.MaxRate != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MaxRate))))
		i--
		dAtA[i] = 0x79
	}
	if len(m.ExtraFields) > 0 {
		for k := range m.ExtraFields {
			v := m.ExtraFields[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCalld(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCalld(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCalld(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.TOR) > 0 {
		i -= len(m.TOR)
		copy(dAtA[i:], m.TOR)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.TOR)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Increments) > 0 {
		for iNdEx := len(m.Increments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Increments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalld(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.RatingInfos) > 0 {
		for iNdEx := len(m.RatingInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RatingInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCalld(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.FallbackSubject) > 0 {
		i -= len(m.FallbackSubject)
		copy(dAtA[i:], m.FallbackSubject)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.FallbackSubject)))
		i--
		dAtA[i] = 0x52
	}
	if m.DurationIndex != nil {
		{
			size, err := m.DurationIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.LoopIndex != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.LoopIndex))))
		i--
		dAtA[i] = 0x41
	}
	if m.TimeEnd != nil {
		{
			size, err := m.TimeEnd.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.TimeStart != nil {
		{
			size, err := m.TimeStart.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCalld(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Subject) > 0 {
		i -= len(m.Subject)
		copy(dAtA[i:], m.Subject)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Subject)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tenant) > 0 {
		i -= len(m.Tenant)
		copy(dAtA[i:], m.Tenant)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Tenant)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintCalld(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCalld(dAtA []byte, offset int, v uint64) int {
	offset -= sovCalld(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BalanceSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	if m.Disabled {
		n += 2
	}
	return n
}

func (m *AccountSummary) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if len(m.BalanceSummaries) > 0 {
		for _, e := range m.BalanceSummaries {
			l = e.Size()
			n += 1 + l + sovCalld(uint64(l))
		}
	}
	if m.AllowNegative {
		n += 2
	}
	if m.Disabled {
		n += 2
	}
	return n
}

func (m *Rate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GroupIntervalStart != nil {
		l = m.GroupIntervalStart.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	if m.RateIncrement != nil {
		l = m.RateIncrement.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.RateUnit != nil {
		l = m.RateUnit.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	return n
}

func (m *RIRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConnectFee != 0 {
		n += 9
	}
	l = len(m.RoundingMethod)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.RoundingDecimals != 0 {
		n += 1 + sovCalld(uint64(m.RoundingDecimals))
	}
	if m.MaxCost != 0 {
		n += 9
	}
	l = len(m.MaxCostStrategy)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if len(m.Rates) > 0 {
		for _, e := range m.Rates {
			l = e.Size()
			n += 1 + l + sovCalld(uint64(l))
		}
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	return n
}

func (m *RITiming) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Years) > 0 {
		l = 0
		for _, e := range m.Years {
			l += sovCalld(uint64(e))
		}
		n += 1 + sovCalld(uint64(l)) + l
	}
	if len(m.Months) > 0 {
		l = 0
		for _, e := range m.Months {
			l += sovCalld(uint64(e))
		}
		n += 1 + sovCalld(uint64(l)) + l
	}
	if len(m.MonthDays) > 0 {
		l = 0
		for _, e := range m.MonthDays {
			l += sovCalld(uint64(e))
		}
		n += 1 + sovCalld(uint64(l)) + l
	}
	if len(m.WeekDays) > 0 {
		l = 0
		for _, e := range m.WeekDays {
			l += sovCalld(uint64(e))
		}
		n += 1 + sovCalld(uint64(l)) + l
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.EndTime)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.CronString)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.Tag)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	return n
}

func (m *RateInterval) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timing != nil {
		l = m.Timing.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.Rating != nil {
		l = m.Rating.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.Weight != 0 {
		n += 9
	}
	return n
}

func (m *RatingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MatchedSubject)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.RatingPlanId)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.MatchedPrefix)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.MatchedDestId)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.ActivationTime != nil {
		l = m.ActivationTime.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if len(m.RateIntervals) > 0 {
		for _, e := range m.RateIntervals {
			l = e.Size()
			n += 1 + l + sovCalld(uint64(l))
		}
	}
	if len(m.FallbackKeys) > 0 {
		for _, s := range m.FallbackKeys {
			l = len(s)
			n += 1 + l + sovCalld(uint64(l))
		}
	}
	return n
}

func (m *UnitInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	l = len(m.DestinationID)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.Consumed != 0 {
		n += 9
	}
	l = len(m.TOR)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.RateInterval != nil {
		l = m.RateInterval.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	return n
}

func (m *MonetaryInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UUID)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.Value != 0 {
		n += 9
	}
	if m.RateInterval != nil {
		l = m.RateInterval.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	return n
}

func (m *DebitInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Unit != nil {
		l = m.Unit.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.Monetary != nil {
		l = m.Monetary.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.AccountID)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	return n
}

func (m *Increment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Duration != nil {
		l = m.Duration.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.Cost != 0 {
		n += 9
	}
	if m.BalanceInfo != nil {
		l = m.BalanceInfo.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.CompressFactor != 0 {
		n += 1 + sovCalld(uint64(m.CompressFactor))
	}
	if m.Paid {
		n += 2
	}
	return n
}

func (m *TimeSpan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeStart != nil {
		l = m.TimeStart.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.TimeEnd != nil {
		l = m.TimeEnd.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.Cost != 0 {
		n += 9
	}
	if m.RateInterval != nil {
		l = m.RateInterval.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.DurationIndex != nil {
		l = m.DurationIndex.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if len(m.Increments) > 0 {
		for _, e := range m.Increments {
			l = e.Size()
			n += 1 + l + sovCalld(uint64(l))
		}
	}
	if m.RoundIncrement != nil {
		l = m.RoundIncrement.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.MatchedSubject)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.MatchedPrefix)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.MatchedDestId)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.RatingPlanId)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.CompressFactor != 0 {
		n += 1 + sovCalld(uint64(m.CompressFactor))
	}
	if m.RatingInfo != nil {
		l = m.RatingInfo.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	return n
}

func (m *CallCost) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.TOR)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.Cost != 0 {
		n += 9
	}
	if len(m.Timespans) > 0 {
		for _, e := range m.Timespans {
			l = e.Size()
			n += 1 + l + sovCalld(uint64(l))
		}
	}
	if m.RatedUsage != 0 {
		n += 9
	}
	if m.AccountSummary != nil {
		l = m.AccountSummary.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.DeductConnectFee {
		n += 2
	}
	if m.NegativeConnectFee {
		n += 2
	}
	if m.MaxCostDisconect {
		n += 2
	}
	return n
}

func (m *CallDescriptor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.Tenant)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.Subject)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.TimeStart != nil {
		l = m.TimeStart.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.TimeEnd != nil {
		l = m.TimeEnd.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	if m.LoopIndex != 0 {
		n += 9
	}
	if m.DurationIndex != nil {
		l = m.DurationIndex.Size()
		n += 1 + l + sovCalld(uint64(l))
	}
	l = len(m.FallbackSubject)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if len(m.RatingInfos) > 0 {
		for _, e := range m.RatingInfos {
			l = e.Size()
			n += 1 + l + sovCalld(uint64(l))
		}
	}
	if len(m.Increments) > 0 {
		for _, e := range m.Increments {
			l = e.Size()
			n += 1 + l + sovCalld(uint64(l))
		}
	}
	l = len(m.TOR)
	if l > 0 {
		n += 1 + l + sovCalld(uint64(l))
	}
	if len(m.ExtraFields) > 0 {
		for k, v := range m.ExtraFields {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCalld(uint64(len(k))) + 1 + len(v) + sovCalld(uint64(len(v)))
			n += mapEntrySize + 1 + sovCalld(uint64(mapEntrySize))
		}
	}
	if m.MaxRate != 0 {
		n += 9
	}
	if m.MaxRateUnit != nil {
		l = m.MaxRateUnit.Size()
		n += 2 + l + sovCalld(uint64(l))
	}
	if m.MaxCostSoFar != 0 {
		n += 10
	}
	l = len(m.CgrID)
	if l > 0 {
		n += 2 + l + sovCalld(uint64(l))
	}
	l = len(m.RunID)
	if l > 0 {
		n += 2 + l + sovCalld(uint64(l))
	}
	if m.ForceDuration {
		n += 3
	}
	if m.PerformRounding {
		n += 3
	}
	if m.DryRun {
		n += 3
	}
	if m.DenyNegativeAccount {
		n += 3
	}
	if m.TestCallcost != nil {
		l = m.TestCallcost.Size()
		n += 2 + l + sovCalld(uint64(l))
	}
	return n
}

func sovCalld(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCalld(x uint64) (n int) {
	return sovCalld(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BalanceSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BalanceSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BalanceSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountSummary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountSummary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountSummary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceSummaries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BalanceSummaries = append(m.BalanceSummaries, &BalanceSummary{})
			if err := m.BalanceSummaries[len(m.BalanceSummaries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowNegative", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowNegative = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Disabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIntervalStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GroupIntervalStart == nil {
				m.GroupIntervalStart = &protobuf.Duration{}
			}
			if err := m.GroupIntervalStart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateIncrement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateIncrement == nil {
				m.RateIncrement = &protobuf.Duration{}
			}
			if err := m.RateIncrement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateUnit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateUnit == nil {
				m.RateUnit = &protobuf.Duration{}
			}
			if err := m.RateUnit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RIRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RIRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RIRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectFee", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ConnectFee = float64(math.Float64frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundingMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundingMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundingDecimals", wireType)
			}
			m.RoundingDecimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundingDecimals |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCost", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxCost = float64(math.Float64frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCostStrategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MaxCostStrategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rates", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rates = append(m.Rates, &Rate{})
			if err := m.Rates[len(m.Rates)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RITiming) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RITiming: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RITiming: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCalld
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Years = append(m.Years, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCalld
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCalld
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCalld
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Years) == 0 {
					m.Years = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCalld
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Years = append(m.Years, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Years", wireType)
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCalld
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Months = append(m.Months, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCalld
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCalld
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCalld
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Months) == 0 {
					m.Months = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCalld
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Months = append(m.Months, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Months", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCalld
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MonthDays = append(m.MonthDays, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCalld
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCalld
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCalld
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MonthDays) == 0 {
					m.MonthDays = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCalld
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MonthDays = append(m.MonthDays, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthDays", wireType)
			}
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCalld
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WeekDays = append(m.WeekDays, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCalld
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCalld
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCalld
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WeekDays) == 0 {
					m.WeekDays = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCalld
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WeekDays = append(m.WeekDays, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WeekDays", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CronString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CronString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RateInterval) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RateInterval: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RateInterval: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timing == nil {
				m.Timing = &RITiming{}
			}
			if err := m.Timing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rating == nil {
				m.Rating = &RIRate{}
			}
			if err := m.Rating.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Weight = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RatingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RatingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RatingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingPlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingPlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedDestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedDestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ActivationTime == nil {
				m.ActivationTime = &protobuf.Timestamp{}
			}
			if err := m.ActivationTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateIntervals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RateIntervals = append(m.RateIntervals, &RateInterval{})
			if err := m.RateIntervals[len(m.RateIntervals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FallbackKeys = append(m.FallbackKeys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnitInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnitInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnitInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consumed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Consumed = float64(math.Float64frombits(v))
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TOR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TOR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateInterval == nil {
				m.RateInterval = &RateInterval{}
			}
			if err := m.RateInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MonetaryInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MonetaryInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MonetaryInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UUID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UUID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateInterval == nil {
				m.RateInterval = &RateInterval{}
			}
			if err := m.RateInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebitInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebitInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebitInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Unit == nil {
				m.Unit = &UnitInfo{}
			}
			if err := m.Unit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Monetary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Monetary == nil {
				m.Monetary = &MonetaryInfo{}
			}
			if err := m.Monetary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Increment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Increment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Increment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Duration == nil {
				m.Duration = &protobuf.Timestamp{}
			}
			if err := m.Duration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Cost = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BalanceInfo == nil {
				m.BalanceInfo = &DebitInfo{}
			}
			if err := m.BalanceInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressFactor", wireType)
			}
			m.CompressFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressFactor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Paid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeSpan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeSpan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeSpan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeStart == nil {
				m.TimeStart = &protobuf.Timestamp{}
			}
			if err := m.TimeStart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeEnd == nil {
				m.TimeEnd = &protobuf.Timestamp{}
			}
			if err := m.TimeEnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Cost = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RateInterval", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RateInterval == nil {
				m.RateInterval = &RateInterval{}
			}
			if err := m.RateInterval.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DurationIndex == nil {
				m.DurationIndex = &protobuf.Duration{}
			}
			if err := m.DurationIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Increments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Increments = append(m.Increments, &Increment{})
			if err := m.Increments[len(m.Increments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundIncrement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RoundIncrement == nil {
				m.RoundIncrement = &Increment{}
			}
			if err := m.RoundIncrement.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedPrefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedPrefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatchedDestId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MatchedDestId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingPlanId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingPlanId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompressFactor", wireType)
			}
			m.CompressFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompressFactor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RatingInfo == nil {
				m.RatingInfo = &RatingInfo{}
			}
			if err := m.RatingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallCost) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallCost: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallCost: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TOR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TOR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Cost = float64(math.Float64frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timespans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timespans = append(m.Timespans, &TimeSpan{})
			if err := m.Timespans[len(m.Timespans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatedUsage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.RatedUsage = float64(math.Float64frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountSummary", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountSummary == nil {
				m.AccountSummary = &AccountSummary{}
			}
			if err := m.AccountSummary.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeductConnectFee", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DeductConnectFee = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NegativeConnectFee", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NegativeConnectFee = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCostDisconect", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.MaxCostDisconect = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CallDescriptor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CallDescriptor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CallDescriptor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeStart == nil {
				m.TimeStart = &protobuf.Timestamp{}
			}
			if err := m.TimeStart.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeEnd == nil {
				m.TimeEnd = &protobuf.Timestamp{}
			}
			if err := m.TimeEnd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoopIndex", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.LoopIndex = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DurationIndex == nil {
				m.DurationIndex = &protobuf.Duration{}
			}
			if err := m.DurationIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackSubject", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FallbackSubject = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RatingInfos = append(m.RatingInfos, &RatingInfo{})
			if err := m.RatingInfos[len(m.RatingInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Increments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Increments = append(m.Increments, &Increment{})
			if err := m.Increments[len(m.Increments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TOR", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TOR = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraFields == nil {
				m.ExtraFields = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCalld
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCalld
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCalld
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCalld
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCalld
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCalld
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCalld
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCalld(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCalld
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ExtraFields[mapkey] = mapvalue
			iNdEx = postIndex
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxRate = float64(math.Float64frombits(v))
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxRateUnit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxRateUnit == nil {
				m.MaxRateUnit = &protobuf.Duration{}
			}
			if err := m.MaxRateUnit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCostSoFar", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MaxCostSoFar = float64(math.Float64frombits(v))
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CgrID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CgrID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RunID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForceDuration", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForceDuration = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerformRounding", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PerformRounding = bool(v != 0)
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DryRun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DryRun = bool(v != 0)
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenyNegativeAccount", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DenyNegativeAccount = bool(v != 0)
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestCallcost", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCalld
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCalld
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TestCallcost == nil {
				m.TestCallcost = &CallCost{}
			}
			if err := m.TestCallcost.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCalld(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCalld
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCalld(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCalld
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCalld
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCalld
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCalld
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCalld
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCalld        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCalld          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCalld = fmt.Errorf("proto: unexpected end of group")
)
